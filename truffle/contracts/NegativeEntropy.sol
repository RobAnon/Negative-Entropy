//TODO: Is there any reason to use Ownable instead of current setup?

// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;
pragma experimental ABIEncoderV2;


import "../node_modules/@openzeppelin/contracts/access/AccessControl.sol";
import "../node_modules/@openzeppelin/contracts/access/Ownable.sol";
import "../node_modules/@openzeppelin/contracts/utils/Counters.sol";
import "../node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol";
import "../node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol";
import "../node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "../node_modules/@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol";
import "../node_modules/@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol";
import "../node_modules/@openzeppelin/contracts/access/Ownable.sol";
import "./ModifiedEnumerableMap.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract NegativeEntropy is Context, AccessControl, ERC721Burnable, ERC721Pausable {
    using Counters for Counters.Counter;
    using EnumerableSet for EnumerableSet.Bytes32Set;
    using ModifiedEnumerableMap for ModifiedEnumerableMap.UintToBytes32Map;

    //TODO: REMEMBER THAT THESE CONSTANTS ARE SET FOREVER
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
   	
   	//TODO: Add SIGNER_ROLE

   	//Initial maximum quantity
   	uint256 public maxQuantity = 1000;
   	//Price a constant value â€“ what units should this be in?
   	uint256 public constant PRICE = 0.15;
   	//This should be set in the constructor
   	address payable public treasuryAddress;



    Counters.Counter private _tokenIdTracker;
    //Automatically should generate a getter
    EnumerableSet.Bytes32Set private seedSet;

    ModifiedEnumerableMap.UintToBytes32Map private seedMap;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
     /*
    constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());

        //We do not need to set baseURI in the constructor
    }*/

    constructor(address payable _tA) public ERC721("NegativeEntropy", "NGTV") {
        address payable msgSender = msg.sender;
        _setupRole(MINTER_ROLE, _msgSender());
		_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
		_setupRole(PAUSER_ROLE, _msgSender());
		treasuryAddress = _tA;
		//No need to set baseURI
    }

    modifier onlyOwner() {
        require(hasRole(MINTER_ROLE, _msgSender()), 'Role: not Admin');
        _;
    }



    /**
     * Mint a token to _to and set the URI
     */
    function mint(
        uint256 _tokenId,
        address _to,
        string calldata _tokenURI
    ) public {

        _safeMint(_to, _tokenId);
        _setTokenURI(_tokenId, _tokenURI);
    }

    /**
     * Mint a token to to with a configurationURI already set
     * !! using a minter
     * Primary endpoing for performing mint operations
     * TODO: DOES THIS NEED THE PAYABLE PREFIX?!
     */
    function mint(
        uint256 tokenId,
        address to,
        uint8 v,
        bytes32 r,
        bytes32 s,
        string calldata tokenURI
    ) public {
    	//Check for signature
        require(
            _signedByMinter(tokenId, tokenURI, v, r, s),
            "Negative Entropy: minter must sign URI and ID!"
        );
        //Check if we can mint based on number remaining
        require(_tokenIdTracker.current() < maxQuantity, "NegativeEntropy: All NFTs have been claimed for this series"); 
        require(msg.value >= PRICE, "NegativeEntropy: Insufficient funds to mint a Negative Entropy NFT")

        treasuryAddress.transfer(price);
    	to.transfer(msg.value.sub(price));

        mint(tokenId, to, tokenURI);
    }

    // Minter detection helper
    function addressFromSignature(
        uint256 tokenId,
        string calldata tokenURI,
        address account,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) public view returns (address) {
        if (v < 27) {
            v += 27;
        }

        // this is the hash of the prefixed message
        bytes32 signed =
            keccak256(
                abi.encodePacked(
                    "\x19Ethereum Signed Message:\n32",
                    keccak256(
                        abi.encodePacked(
                            address(this),
                            account,
                            tokenId,
                            tokenURI
                        )
                    )
                )
            );

        return ecrecover(signed, v, r, s);
    }

    // signer helper
    function _signedByMinter(
        uint256 tokenId,
        string calldata tokenURI,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal view returns (bool) {
        return
            isMinter(
                addressFromSignature(tokenId, tokenURI, _msgSender(), v, r, s)
            );
    }

    /**
     * @DEPRECATED (Likely)
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, _tokenIdTracker.current());
        _tokenIdTracker.increment();
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
        _unpause();
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function burn(uint256 tokenId) public override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
        _burn(tokenId);
        //If we burn a token, decrease the counter
        _tokenIdTracker.decrement();
        //Also remove it from our mappings
        removeSeed(tokenId);
    }

    /**
    *
    * GETTERS
    *
    */


    //Note: Do I actually need this if I have a getter?
    function seedClaimed(string memory checkSeed) public view returns (bool) {
    	return EnumerableSet.contains(seedSet, keccak256(bytes (checkSeed)));
    }

    function isMinter(address _address) public view returns (bool) {
        return hasRole(MINTER_ROLE, _address);
    }


    /**
    *
    * SETTERS
    *
    */

    function claimSeed(string memory clmSeed) internal returns (bool) {
    	return EnumerableSet.add(seedSet, keccak256(bytes (clmSeed)));
    } 

    function removeSeed(uint256 id) internal returns (bool) {
    	if(!ModifiedEnumerableMap.contains(seedMap, id)) return false;
    	bytes32 seedHash = ModifiedEnumerableMap.get(seedMap, id);
    	if(!removeSeed(seedHash)) return false;
    	if(!ModifiedEnumerableMap.remove(seedMap, id)) return false;
    	return true;
    }

    function removeSeed(bytes32 seedHash) internal returns (bool) {
    	return EnumerableSet.remove(seedSet, seedHash);
    }

    function setMaxQuantity(uint256 quant) onlyOwner() public {
    	maxQuantity = quant;
    }

}